@Master['ui_master']

@Section['Header']
	<link rel="stylesheet" href="/content/jsoneditor.css"/>
@EndSection


@Section['Content']
<div class="container" role="main">
	<div id="edit-page" style="display: none;">
		<div data-bind="with: $root.entry">
			<h3>Editing <span data-bind="text: Entry.name"></span></h3>

			<div>
				<!-- content here -->
				<div style="padding-top: 10px;" data-bind="text: Entry.description"></div>
				<div style="padding-top: 10px;">
					Plugin Type: <span style="font-style: italic;" data-bind="text: Entry.interfaceType"></span>
				</div>
				<div style="padding-top: 10px;">
					Configuration Type: <span style="font-style: italic;" data-bind="text: Entry.concreteType"></span>
				</div>

				<div id="editor" class="json-editor"></div>

				<div style="padding-top: 10px;	">
					<button type="button" class="btn btn-primary btn-lg" data-bind="click: $root.saveEntry">Save <span class="glyphicon glyphicon-floppy-disk"></span></button>
					<button type="button" class="btn btn-danger btn-lg" data-bind="click: $root.deleteEntry, visible: $root.isEdit">Delete <span class="glyphicon glyphicon-trash"></span></button>
					<button type="button" class="btn btn-primary btn-lg" data-bind="click: $root.cancelEditEntry">Cancel</button>
				</div>
			</div>
		</div>
	</div>

	<div id="restart-page" style="display: none; margin-top: 25px;">
		<p class="lead">Restarting Wolfpack, please wait...</p>
	</div>

	<div id="main-page">
		<div id="errorAlert" class="alert alert-danger alert-dismissable" style="display: none;">
			<button type="button" class="close" aria-hidden="true" data-bind="click: clearError">&times;</button>
			<strong>Dang it!</strong> something went wrong...
		</div>
	 
		<div id="pending-container" data-bind="visible: $root.pending().length > 0" style="background-image: url('/content/img/warning.png'); background-repeat: no-repeat; min-height: 130px;">
			<h2>Pending Changes</h2>
			<p>Wolfpack needs to be restarted in order to activate your configuration changes...</p>
			<div>
				<button type="button" class="btn btn-primary" data-bind="html: pendingChangesAccept, click: acceptPendingChanges"></button>
				<button type="button" class="btn btn-primary" data-bind="click: cancelPendingChanges">Cancel</button>
			</div>
		</div>
		
		<div id="tags-container">
			<h2>Plugins</h2>

			<div>
				<div style="display: block; padding-top: 10px;" data-bind="foreach: $root.tags">
					<button type="button" style="margin-bottom: 5px;" data-bind="click: $parent.reloadConfiguration, css: StateStyle, html: ButtonContent"></button>
				</div>
			</div>
		</div>

		<div id="entries-container" data-bind="foreach: entries">
			<div data-bind="attr: { style: BackgroundImage};" >
				<div>
					<h3 style="display: inline" data-bind="text: Entry.name"></h3>
					<!-- ko if: IsRunning -->
					<button type="button" class="btn btn-success" data-bind="click: $parent.editEntry">Edit</button>
					<!-- /ko -->
					<!-- ko ifnot: IsRunning -->
					<button type="button" class="btn btn-primary" data-bind="click: $parent.createEntry">Create</button>
					<!-- /ko -->
				</div>
				<div>
					<div id="content-body-wrapper" style="display:table; border-collapse:collapse;">
						<div id="content-body" style="display:table-row;">
							<div id="secondary-nav" style="display:table-cell; vertical-align: top; padding-right: 10px;">
								<!-- some additional column here -->
								<div style="display: block; padding-top: 10px;" data-bind="text: Entry.description"></div>
								<div style="display: block; padding-top: 10px;" data-bind="visible: (Entry.interfaceType != null)">
									Plugin Type: <span style="font-style: italic;" data-bind="text: Entry.interfaceType"></span>
								</div>
								<div style="display: block; padding-top: 10px;">
									Configuration Type: <span style="font-style: italic;" data-bind="text: Entry.concreteType"></span>
								</div>
							</div>
						</div>
					</div>
				</div>        
			</div>
		</div>
	</div>

</div>
@EndSection


@Section['PageScript'] 
	<script type="text/javascript" src="/scripts/knockout-3.1.0.js"></script>
	<script type="text/javascript" src="/scripts/FlexiJsonEditor/jquery.jsoneditor.js"></script>
	<script type="text/javascript" language="javascript">
		var model = new ViewModel();

		function ViewModel() {
			var self = this;
			self.tags = ko.observableArray();
			self.entries = ko.observableArray();
			self.pending = ko.observableArray();
			self.isEdit = ko.observable(false);
			self.entry = ko.observable();
			self.jsonConfig = { };
			self.restart = ko.observable(true);
			self.instanceId = null;
		    self.restartHandle = 0;

			self.clearError = function () {
				$('#errorAlert').slideUp();
			};

			self.pendingChangesAccept = ko.computed(function () {
				return 'Accept&nbsp;<span class="badge">' + self.pending().length + '</span>';
			}, this);

			self.acceptPendingChanges = function () {
				console.log('acceptPendingChanges()');

				$.ajax({
					type: 'GET',
					url: '/api/configuration/applychanges',
					data: { Restart: self.restart },
					contentType: 'application/json; charset=utf-8',
					dataType: 'json'
				}).done(function (data, status, jqXhr) {
					console.log('applied changes ok');
					console.log(data);
					self.waitForRestart();
					
				}).fail(function (jqXhr, status, err) {
					console.log(err);
					//errorAlert
					$('#errorAlert').show();
				});
			};
			
			self.cancelPendingChanges = function () {
				console.log('cancelPendingChanges()');

				$.ajax({
					type: 'GET',
					url: '/api/configuration/cancelchanges',
					contentType: 'application/json; charset=utf-8',
					dataType: 'json'
				}).done(function (data, status, jqXhr) {
					console.log('canceled changes ok');
					self.pending.removeAll();

				}).fail(function (jqXhr, status, err) {
					console.log(err);
					$('#errorAlert').slideDown();
				});
			};

			self.editEntry = function (entry) {
				self.isEdit(true);
				self.configureEntry(entry);
			};

			self.createEntry = function (entry) {
				self.isEdit(false);
				self.configureEntry(entry);
			};

			self.configureEntry = function (entry) {
				self.entry(entry);
				console.log('Editing Entry: ' + self.entry().Entry.name);

				self.jsonConfig = {
					RequiredProperties: entry.Entry.requiredProperties,
					Config: JSON.parse(entry.Entry.data)
				};

				var editor = $('#editor');
				editor.jsonEditor(self.jsonConfig);
				$('span.expander').trigger('click');

				$('#main-page').hide();
				$('#edit-page').show();
			};

			self.deleteEntry = function (entry) {
				sendChangeRequest(entry.Entry, 'delete');
			};

			self.saveEntry = function (entry) {			    
				sendChangeRequest(entry.Entry, 'update');
			};
			
			self.cancelEditEntry = function (entry) {
				console.log('Cancelled Edit: ' + entry.Entry.name);

				$('#main-page').show();
				$('#edit-page').hide();
			};

			self.waitForRestart = function () {
			    $('#main-page').hide();
			    $('#restart-page').show();

			    self.restartHandle = setInterval(function () {
			        $.ajax({
						type: 'GET',
						url: '/api/notification/start',
						contentType: 'application/json; charset=utf-8',
						dataType: 'json'
					}).done(function (data, status, jqXhr) {
			            console.log('service responded! (' + self.restartHandle + ')');

			            if (self.restartHandle > 0) {
							console.log('...checking this is a different Wolfpack instance!...');
							console.log(self.instanceId + ' vs ' + data.info.id);

							if (data.info.id != self.instanceId) {
								clearInterval(self.restartHandle);
								self.restartHandle = 0;

								self.loadConfiguration('*');
								self.loadTags();
								$('#restart-page').hide();
								$('#main-page').show();
							}
							else {
								console.log('...yep, same instance...waiting some more...');
							}
			            }
			        }).fail(function (jqXhr, status, err) {
						// trap and retry...
			        });
			    }, 5000);
			};

			self.refreshConfiguration = function() {
				var tags = new Array();
				$.each(self.tags(), function (index, value) {
					if (value.Selected() === true) {
						tags.push(value.Tag());
					}
				});

				var qsTags = tags.join(',');
				console.log('Loading configuration for: ' + qsTags);
				self.loadConfiguration(qsTags);
			};

			self.reloadConfiguration = function (tag) {
				console.log('reloadConfiguration (tagClick): ' + tag.Tag());

				if (tag.Tag() === 'All') {
					$.each(self.tags(), function (index, t) {
						t.Selected(true);
					});
				} else if (tag.Tag() === 'None') {
					$.each(self.tags(), function (index, t) {
						t.Selected(false);
					});
				} else {
					tag.Selected(!tag.Selected());
				}

				console.log(tag.Tag() + ' is now selected:' + tag.Selected());
				self.refreshConfiguration();
			};

			self.loadTags = function () {
			    self.tags.removeAll();

			    var tag = new Tag();
			    tag.Selected(true);
			    tag.Tag('All');
			    self.tags.push(tag);

			    tag = new Tag();
			    tag.Selected(true);
			    tag.Tag('None');
			    self.tags.push(tag);

			    $.getJSON('/api/configuration/tagcloud', function (data) {
			        console.log('Loaded tagcloud');
			        console.log(data);

			        $.each(data, function (index, value) {
			            tag = new Tag();
			            tag.Count(value.count);
			            tag.Tag(value.tag);
			            tag.Selected(true);

			            self.tags.push(tag);
			        });

			        $('#tag-container').show();
			    });
			};

			self.loadConfiguration = function (tags) {
			    $('#entries-container').hide();
			    self.entries.removeAll();
			    self.pending.removeAll();

			    console.log('loading config, entries.len=' + self.entries.length + ', pending.len=' + self.pending.length);

			    if (typeof tags === 'undefined') {
			        tags = '';
			    } else if (tags === '*') {
			        tags = '';
			    } else if (tags === '') {
			        // no tags selected
			        return;
			    }

			    $.getJSON('/api/configuration/catalogue?tags=' + tags, function (data) {
			        console.log('configuration loaded (' + data.instanceId + ')');
			        console.log(data);

					self.instanceId = data.instanceId;

			        $.each(data.items, function (index, value) {
			            var entry = new Entry(value);
			            self.entries.push(entry);
			        });

			        $.each(data.pending, function (index, value) {
			            var change = new PendingChange(value);
			            self.pending.push(change);
			        });

			        $('#entries-container').show();
			    });
			};

			function sendChangeRequest(entry, action) {
				console.log('Sending CR: ' + entry.name + ' (' + action + ')');

				entry.requiredProperties = self.jsonConfig.RequiredProperties;
				entry.data = JSON.stringify(self.jsonConfig.Config);

				$.ajax({
					type: 'POST',
					url: '/api/configuration/changerequest',
					data: JSON.stringify({ Action: action, Entry: entry }),
					contentType: 'application/json; charset=utf-8',
					dataType: 'json'
				}).done(function (data, status, jqXhr) {
					console.log('change request accepted');
					console.log(data);

					self.refreshConfiguration();

					$('#main-page').show();
					$('#edit-page').hide();
				}).fail(function (jqXhr, status, err) {
					console.log('change request rejected');
					console.log(err);

					$('#errorAlert').slideDown();
				});
			};
		}

		function PendingChange(change) {
			var self = this;
			self.Change = change;
		}
		
		function Entry(entry) {
			var self = this;
			self.Entry = entry;

			self.ContainsTag = function (term) {
				var tags = self.Entry.tags;
				for (var j = 0; j < tags.length; j++) {
					if (tags[j].match(term)) return true;
				}
				return false;
			};

			self.IsRunning = ko.computed(function () {
				return self.ContainsTag('Running');
			}, this);

			self.ImageUrl = ko.computed(function () {
				if (self.ContainsTag('Bootstrap'))
					return '/content/img/bootstrap.png';
				if (self.ContainsTag('HealthCheck'))
					return '/content/img/check.png';
				if (self.ContainsTag('Schedule'))
					return '/content/img/scheduler.png';
				if (self.ContainsTag('Publisher'))
					return '/content/img/publisher.png';
				if (self.ContainsTag('Activity'))
					return '/content/img/activity.png';
				return '/content/img/config.png';
			}, this);

			self.BackgroundImage = ko.computed(function (){
				return 'margin-top: 25px; margin-bottom: 10px; min-height: 130px; height: 130px; height: auto !important; background-image: url("' + self.ImageUrl() + '"); background-repeat: no-repeat;';
			}, this);
		}
		
		function Tag() {
			this.Tag = ko.observable();
			this.Count = ko.observable();
			this.Selected = ko.observable(true);
			this.StateStyle = ko.computed(function () {
				if (this.Tag() === 'All' || this.Tag() === 'None') 
					return 'btn btn-primary';

				if (this.Selected()) {
					if (this.Tag() === 'Running')
						return 'btn btn-success';
					return 'btn btn-warning';
				}

				return 'btn btn-link';
			}, this);
			this.ButtonContent = ko.computed(function () {
				if (this.Tag() === 'All' || this.Tag() === 'None') return this.Tag();                
				return this.Tag() + '&nbsp;<span class="badge">' + this.Count() + '</span>';
			}, this);
		}

		$(document).ready(function () {
			setActiveTab('Configure');
			$('tag-container').hide();
			$('entries-container').hide();

			ko.applyBindings(model);

			model.loadConfiguration('*');
			model.loadTags();
		});
	</script>
@EndSection